//*********************************************************************
//
//  APthreshold.hoc
//
// 	Alan Goldin Lab, University of California, Irvine
// 	Jay Lickfett - Last Modified: 9 Sept 2005
//
//
//  Injects increasing amounts of current into separate  
//	model neuron soma to determine action potential thresholds.
//
//*********************************************************************

//----------------------------------------------------------------------

ilow = 20   	// starting injection current (pA)
istep = 10		// current step increment (pA)
nsteps = 35		// number of steps to run
verbosedata = 0   // 1 to log all data points to disk, or
				  // 0 to log every 10th data point (faster)
 
//----------------------------------------------------------------------


begintemplate ICellWT2005

	public isoma
	create isoma
	objectvar stim

	proc init() {		// takes injection current amplitude as argument
	
		iamp = $1	
	
		isoma {
				nseg=1 				
				L=25 
				diam=25
				
				Ra=210				
				cm=1

				insert ichanWT2005		
				enat = 50 
				ekf  = -80 
				gnatbar_ichanWT2005 = 0.2
				gkfbar_ichanWT2005  = 0.06
				gl_ichanWT2005      = 0.0005 
				el_ichanWT2005      = -60 
		}

			
		isoma stim = new IClamp(0.5)
		stim.del = 50
		stim.dur = 200
		stim.amp = iamp/1000
	}

endtemplate ICellWT2005


begintemplate ICellR859C

	public isoma
	create isoma
	objectvar stim

	proc init() {		// takes injection current amplitude as argument
	
		iamp = $1	
	
		isoma {
		
		
			nseg=1 
			L=25 
			diam=25

			Ra=210		
			cm=1
			
			insert ichanR859C1
			enat=50 
			ekf=-80 
			gnatbar_ichanR859C1=0.2
			gkfbar_ichanR859C1=0.06
			gl_ichanR859C1=0.0005 
			el_ichanR859C1=-60 
		}

			
		isoma stim = new IClamp(0.5)
		stim.del = 50
		stim.dur = 200
		stim.amp = iamp/1000
	}

endtemplate ICellR859C


begintemplate ICellMixed

	public isoma
	create isoma
	objectvar stim

	proc init() {		// takes injection current
	
		iamp = $1	
		
	
		isoma {
				nseg=1 				
				L=25 
				diam=25
				
				Ra=210				
				cm=1

				// vary gnatbar values to adjust percentage WT vs. Mutant
				// total gnatbar should sum to 0.2
				
				insert ichanWT2005		
				gnatbar_ichanWT2005 = 0.2
				gkfbar_ichanWT2005  = 0.06
				gl_ichanWT2005      = 0.0005 
				el_ichanWT2005      = -60 
				
				insert ichanR859C1
				gnatbar_ichanR859C1	=	0.00

				enat = 50 
				ekf	 = -80 			
		}

			
		isoma stim = new IClamp(0.5)
		stim.del = 50
		stim.dur = 200
		stim.amp = iamp/1000
	}

endtemplate ICellMixed


begintemplate SemiHH_default
// http://web.mit.edu/neuron_v7.4/nrntuthtml/tutorial/tutA.html
	public isoma
	create isoma
	objectvar stim

	proc init() {		// takes injection current
	
		iamp = $1	
		
	
		isoma {
				nseg=1 				
				L=18.8
				diam=18.8
				Ra=123.0
				
				insert hh		

//    gnabar_hh: The maximum specific sodium channel conductance [Default value = 0.120 S/cm2]
//    gkbar_hh: The maximum specific potassium channel conductance [Default value = 0.036 S/cm2]
//    gl_hh: The maximum specific leakage conductance [Default value = 0.0003 S/cm2]
//    ena: The reversal potential for the sodium channel [Default value = 50 mV]
//    ek: The reversal potential for the potassium channel [Default value = -77 mV]
//    el_hh: The reversal potential for the leakage channel [Default value = -54.3 mV]
	
		}
			
		isoma stim = new IClamp(0.5)
		stim.del = 50
		stim.dur = 200
		stim.amp = iamp/1000
	}

endtemplate SemiHH_default


begintemplate SemiHH_with_R859C1_values
// http://web.mit.edu/neuron_v7.4/nrntuthtml/tutorial/tutA.html
	public isoma
	create isoma
	objectvar stim

	proc init() {		// takes injection current
	
		iamp = $1	
		
	
		isoma {
				nseg=1 				
				L=25 
				diam=25
				
				Ra=210				
				cm=1

				// vary gnatbar values to adjust percentage WT vs. Mutant
				// total gnatbar should sum to 0.2
				
				insert hh		

//    gnabar_hh: The maximum specific sodium channel conductance [Default value = 0.120 S/cm2]
//    gkbar_hh: The maximum specific potassium channel conductance [Default value = 0.036 S/cm2]
//    gl_hh: The maximum specific leakage conductance [Default value = 0.0003 S/cm2]
//    ena: The reversal potential for the sodium channel [Default value = 50 mV]
//    ek: The reversal potential for the potassium channel [Default value = -77 mV]
//    el_hh: The reversal potential for the leakage channel [Default value = -54.3 mV]
	
		}

			
		isoma stim = new IClamp(0.5)
		stim.del = 50
		stim.dur = 200
		stim.amp = iamp/1000
	}

endtemplate SemiHH_with_R859C1_values



// instantiate the test cells (one for each injected current step)
objectvar WTcell[nsteps]
objectvar MuTcell[nsteps]
objectvar MXcell[nsteps]
objectvar semiHH_Default_cell[nsteps]
objectvar semiHH_R859C1_cell[nsteps]

// voltage log in memeory
objref data_vecs_WT[nsteps]
objref data_vecs_Mut[nsteps]
objref data_vecs_MX[nsteps]
objref data_vecs_semiHH_Default[nsteps]
objref data_vecs_semiHH_R859C1[nsteps]


// simulation control

proc initWT(){
	for i=0, nsteps-1 {	 
		WTcell[i] = new ICellWT2005(ilow+(istep*i))  	
		data_vecs_WT[i] = new Vector()
	}
}


proc runWTsim() {	
	dt = 0.01
	v_init = -60
	tstop = 300
	tctr = 0
		
	finitialize(v_init)
		
	while(t<tstop) {
		if ((verbosedata == 1) || (tctr % 10 == 0)) {
			for i=0, nsteps-1 {
				data_vecs_WT[i].append(WTcell[i].isoma.v(0.5))
			}
		}
		tctr = tctr + 1
			
		fadvance()
	}	
}


// --------------------------------------


proc initMT(){
	for i=0, nsteps-1 {	 
		MuTcell[i] = new ICellR859C(ilow+(istep*i))  		
		data_vecs_Mut[i] = new Vector()
	}
}

proc runMuTsim() {		
	dt = 0.01
	v_init = -60
	tstop = 300
	tctr = 0

	finitialize(v_init)
	
	while(t<tstop) {
		if ((verbosedata == 1) || (tctr % 10 == 0)) {
			for i=0, nsteps-1 {
				data_vecs_Mut[i].append(MuTcell[i].isoma.v(0.5))
			}
		}
		tctr = tctr + 1
			
		fadvance()
	}
}


// --------------------------------------


proc initMX(){
	for i=0, nsteps-1 {	 
		MXcell[i] = new ICellMixed(ilow+(istep*i))  
		data_vecs_MX[i] = new Vector()	
	}
}

proc runMXsim() {		
	dt = 0.01
	v_init = -60
	tstop = 300
	tctr = 0

	finitialize(v_init)
	
	while(t<tstop) {
		if ((verbosedata == 1) || (tctr % 10 == 0)) {
			for i=0, nsteps-1 {
				data_vecs_MX[i].append(MXcell[i].isoma.v(0.5))
			}
		}
		tctr = tctr + 1
			
		fadvance()
	}
}


// --------------------------------------


proc initSemiHH_default(){
	for i=0, nsteps-1 {	 
		semiHH_Default_cell[i] = new SemiHH_default(ilow+(istep*i))  
		data_vecs_semiHH_Default[i] = new Vector()	
	}
}

proc runSemiHH_defaultsim() {		
	dt = 0.01
	v_init = -60
	tstop = 300
	tctr = 0

	finitialize(v_init)
	
	while(t<tstop) {
		if ((verbosedata == 1) || (tctr % 10 == 0)) {
			for i=0, nsteps-1 {
				data_vecs_semiHH_Default[i].append(semiHH_Default_cell[i].isoma.v(0.5))
			}
		}
		tctr = tctr + 1
			
		fadvance()
	}
}

// --------------------------------------

proc initSemiHH_R859C1(){
	for i=0, nsteps-1 {	 
		semiHH_R859C1_cell[i] = new SemiHH_with_R859C1_values(ilow+(istep*i))  
		data_vecs_semiHH_R859C1[i] = new Vector()	
	}
}

proc runSemiHH_R859C1sim() {		
	dt = 0.01
	v_init = -60
	tstop = 300
	tctr = 0

	finitialize(v_init)
	
	while(t<tstop) {
		if ((verbosedata == 1) || (tctr % 10 == 0)) {
			for i=0, nsteps-1 {
				data_vecs_semiHH_R859C1[i].append(semiHH_R859C1_cell[i].isoma.v(0.5))
			}
		}
		tctr = tctr + 1
			
		fadvance()
	}
}
// --------------------------------------